#include "imports/stdlib.fc";
#include "imports/utils.fc";

global cell ctx_cur_list, int ctx_utime_since,  int ctx_utime_until, int ctx_total_weight;


const int op::new_key_block = 0x11a78ffe;
const int op::check_block = 0x8eaa9d76;
const int tag::ok = 0xff8ff4e1;
const int tag::correct = 0xce02b807;
const int config_params::current_validators_set = 34;


(cell, cell) load_data() impure inline_ref {
  slice cs = get_data().begin_parse();
  cs~load_uint(32);
  (cell, cell) res = (cs~load_ref(), cs~load_ref());
  cs.end_parse();
  return res;
}

() store_data(cell vset,
              cell keyblocks) impure inline_ref {
  set_data(begin_cell()
    .store_uint(0, 32)
    .store_ref(vset)
    .store_ref(keyblocks)
  .end_cell());
}


() accept_key_block(cell vset, cell block) impure {
  (cell old_vset, cell keyblocks) = load_data();
  store_data(vset, begin_cell().store_ref(block).store_ref(keyblocks).end_cell());
}


cell parse_mc_block_extra(cell mc_extra) {
  ;; masterchain_block_extra#cca5
  ;;   key_block:(## 1)
  ;;   shard_hashes:ShardHashes
  ;;   shard_fees:ShardFees
  ;;   ^[ prev_blk_signatures:(HashmapE 16 CryptoSignaturePair)
  ;;   recover_create_msg:(Maybe ^InMsg)
  ;;   mint_msg:(Maybe ^InMsg) ]
  ;;   config:key_block?ConfigParams
  ;;   = McBlockExtra;
  var cs = begin_parse(mc_extra);
  
  int flag = cs~load_uint(16);
  int key_block = cs~load_uint(1);
  ~dump(key_block);
  cell shard_hashes = cs~load_dict();
  cell shard_fees = cs~load_dict();
  cell prev = cs~load_ref();

  slice conf_addr = cs~load_bits(256);
  ;; ~dump(conf_addr);
  cell config = cs~load_ref();
  cell current_vset = config.idict_get_ref(32, config_params::current_validators_set);
  return current_vset;
  
}

cell parse_block_extra(cell extra) {
  ;; block_extra in_msg_descr:^InMsgDescr
  ;;   out_msg_descr:^OutMsgDescr
  ;;   account_blocks:^ShardAccountBlocks
  ;;   rand_seed:bits256
  ;;   created_by:bits256
  ;;   custom:(Maybe ^McBlockExtra) = BlockExtra;

  var cs = begin_parse(extra);
  cell in_msg_descr = cs~load_ref();
  cell out_msg_descr = cs~load_ref();
  cell account_blocks = cs~load_ref();
  int rand_seed = cs~load_uint(256);
  int created_by = cs~load_uint(256);
  cell custom = cs~load_ref();

  return custom;
} 


int check_block_info(cell info) impure {
  ;; block_info#9bc7a987 version:uint32
  ;;   not_master:(## 1)
  ;;   after_merge:(## 1) before_split:(## 1)
  ;;   after_split:(## 1)
  ;;   want_split:Bool want_merge:Bool
  ;;   key_block:Bool vert_seqno_incr:(## 1)
  ;;   flags:(## 8) { flags <= 1 }
  ;;   seq_no:# vert_seq_no:# { vert_seq_no >= vert_seqno_incr }
  ;;   { prev_seq_no:# } { ~prev_seq_no + 1 = seq_no }
  ;;   shard:ShardIdent gen_utime:uint32
  ;;   start_lt:uint64 end_lt:uint64
  ;;   gen_validator_list_hash_short:uint32
  ;;   gen_catchain_seqno:uint32
  ;;   min_ref_mc_seqno:uint32
  ;;   prev_key_block_seqno:uint32
  ;;   gen_software:flags . 0?GlobalVersion
  ;;   master_ref:not_master?^BlkMasterInfo
  ;;   prev_ref:^(BlkPrevInfo after_merge)
  ;;   prev_vert_ref:vert_seqno_incr?^(BlkPrevInfo 0)
  ;;   = BlockInfo;
  var cs = begin_parse(info);
  ;; ~dump(cs.slice_bits());
  cs~load_uint(32 + 32 + 4 + 2);
  int is_key? = cs~load_int(1);
  ;; ~dump(is_key?);
  cs~load_uint(1 + 8 + 32 + 32 + 2 + 6 + 32 + 64);
  int gen_utime = cs~load_uint(32);
  ~dump(gen_utime);
  throw_unless(504, gen_utime >= ctx_utime_since);
  throw_unless(505, gen_utime <= ctx_utime_until);
  return is_key?;
}

(cell, int) parse_block(cell block) impure { ;; NOTE: is it good to be impure?
  ;; block#11ef55aa global_id:int32
  ;;   info:^BlockInfo value_flow:^ValueFlow
  ;;   state_update:^(MERKLE_UPDATE ShardState)
  ;;   extra:^BlockExtra = Block;

  var cs = begin_parse(block);
  int flag = cs~load_uint(32);
  int global_id = cs~load_uint(32);

  cell info = cs~load_ref();
  int is_key? = check_block_info(info);

  cell value_flow = cs~load_ref();
  cell state_update = cs~load_ref();
  cell extra = cs~load_ref();
  return (extra, is_key?);

}

(cell, int, int, int) check_validator_set(cell vset) inline {
  ~strdump("is vset null");
  ~dump(vset.cell_null?());
  slice cs = vset.begin_parse();

  throw_unless(9, cs~load_uint(8) == 0x12);  ;; validators_ext#12 only

  int utime_since = cs~load_uint(32);
  int utime_until = cs~load_uint(32);
  int total = cs~load_uint(16);
  int main = cs~load_uint(16);
  int total_weight = cs~load_uint(64);
  ~dump(total);
  ~dump(main);
  ~dump(total_weight);
  throw_unless(9, main > 0);
  throw_unless(9, total >= main);
  cell list = cs~load_dict();
  return (list, utime_since, utime_until, total_weight);
}

() load_current_validators() impure {
  (cell cur_vset, _) = load_data();
  (ctx_cur_list, ctx_utime_since,  ctx_utime_until, ctx_total_weight) = check_validator_set(cur_vset);
  ~strdump("epoch");
  ~dump(ctx_utime_since);
  ~dump(ctx_utime_until);
}

int check_block_signs(int block_hash, cell signatures) {
  ;; signs
  slice signsc = signatures.begin_parse();
  slice file_hash = signsc~load_bits(256);
  cell signdict = signsc~load_dict();

  ;; check signs
  var message = begin_cell()
    .store_uint(0x706e0bc5, 32)
    .store_uint(block_hash, 256)
    .store_slice(file_hash).end_cell().begin_parse();

  int index = -1;
  int verified_weight = 0;
  do {
    (index, slice signature, int found?) = signdict.udict_get_next?(16, index);
    if(found?) {
      ~strdump("index found:");
      ~dump(index);
      (slice vinfo, int vfound?) = ctx_cur_list.udict_get?(16, index);
      throw_unless(401, vfound?);

      ;; validator#53 public_key:SigPubKey weight:uint64 = ValidatorDescr;
      ;; validator_addr#73 public_key:SigPubKey weight:uint64 adnl_addr:bits256 = ValidatorDescr;
      ;; validators#11 utime_since:uint32 utime_until:uint32 
      ;;   total:(## 16) main:(## 16) { main <= total } { main >= 1 } 
      ;;   list:(Hashmap 16 ValidatorDescr) = ValidatorSet;
      vinfo~skip_bits(8 + 32);
      int pubkey = vinfo~load_uint(256);
      int weight = vinfo~load_uint(64);   

      ifnot(check_data_signature(message, signature, pubkey)) {
        ~dump(index);
        ~dump(weight);
        throw(502);
      }
      verified_weight += weight;
    }
  } until ( ~ found?);
  ~dump(verified_weight);
  return (verified_weight * 3 >= 2 * ctx_total_weight);
}


() send_answer(cell in_msg_full, int query_id, int ans_tag, int block_hash) impure inline_ref {

  slice cs = in_msg_full.begin_parse();
  int flags = cs~load_uint(4);
  slice s_addr = cs~load_msg_addr();
  send_raw_message(begin_cell()
    .store_uint(0x18, 6)
    .store_slice(s_addr)
    .store_uint(0, 4 + 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_uint(ans_tag, 32)
    .store_uint(query_id, 64)
    .store_uint(block_hash, 256)
    .end_cell(), 64 + 16);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg) impure {
  if (in_msg.slice_empty?()) { ;; ignore all empty messages
      return ();
  }
  ~strdump("start");
  int action = in_msg~load_uint(32);
  ;; ~dump(action);
  if (action == op::check_block) {
    int query_id = in_msg~load_uint(64);
    ;; ~dump(query_id);
    cell block = in_msg~load_ref();
    ;; ~dump(block);
    cell signatures = in_msg~load_ref();
    (int block_hash, _) = block.calc_cell_hash(1);

    ;; load current vset
    load_current_validators();
    parse_block(block);

    throw_unless(503, check_block_signs(block_hash, signatures));
  
    send_answer(in_msg_full,query_id,tag::correct,block_hash);

  }
  if (action == op::new_key_block) {
    int query_id = in_msg~load_uint(64);
    ;; ~dump(query_id);
    cell block = in_msg~load_ref();
    ;; ~dump(block);
    cell signatures = in_msg~load_ref();
    (int block_hash, _) = block.calc_cell_hash(1);

    ;; load current vset
    load_current_validators();
    (cell extra, int is_key?) = parse_block(block);

    throw_unless(503, check_block_signs(block_hash, signatures));

    throw_unless(506, is_key?);
    ~strdump("get extra");
    cell custom = parse_block_extra(extra);
    ~strdump("get custom");
    cell new_vset = parse_mc_block_extra(custom);
    ~strdump("get vset");


    accept_key_block(new_vset, block);
    send_answer(in_msg_full,query_id,tag::ok,block_hash);
  }
  

  ;; cell extra = parse_block(block);
  ;; ~strdump("get extra");
  ;; cell custom = parse_block_extra(extra);
  ;; ~strdump("get custom");
  ;; cell vset = parse_mc_block_extra(custom);
  ;; ~strdump("get vset");
  
  ;; (cell list, int utime_since,  int utime_until) = check_validator_set(vset);
  ;; utime_since~dump();
  ;; utime_until~dump();
  ;; ~dump(list.dict_empty?());
  
  ;; (int key, slice vinfo, int success) = list.udict_get_next?(16, 25);
  ;; ~dump(success);
  ;; ~dump(key);

  ~strdump("done");
  return ();
}

